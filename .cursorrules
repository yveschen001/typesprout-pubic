# TypeSprout .cursorrules

project:
  name: "TypeSprout — Kids Typing & Tree Growth"
  versioning:
    - Bump minor on feature, patch on fix; reflect in README
  locale: zh-TW

runtime:
  node: "22.x"           # use .nvmrc
  packageManager: npm
  react: "18.3.x"
  vite: "7.x"
  tailwind: "4 + @tailwindcss/vite"
  typescript: strict
  testing: ["vitest", "@testing-library/react", "playwright"]

routing_i18n:
  baseRoute: "/{lang}/..."
  supportedLangs: ["zh-TW","zh-CN","en-US"]
  router: react-router-dom@7
  i18n: i18next + react-i18next
  redirect:
    - Missing/invalid lang -> navigator.language or fallback en-US

structure:
  src/app: [main.tsx, routes]
  src/libs: [firebase.ts, i18n.ts]
  src/features: [auth, typing, leaderboard, gamification, profile, garden]
  src/pages: [Home, Practice, Test, Result, Leaderboard, Profile, Garden, Admin]
  src/components: [Button, Card, Field]
  scripts: [gen-sitemap-robots.mjs]
  public: static assets

editing_rules:
  - Prefer editing existing files over adding new ones
  - Keep related logic in features/* modules
  - No random demo/test/log files
  - Create new files only when existing file becomes too large
  - Never create new .env files - use existing .env files only
  - Do not modify or create environment variable files without explicit user request

env_variables:
  required:
    - VITE_FIREBASE_API_KEY
    - VITE_FIREBASE_AUTH_DOMAIN
    - VITE_FIREBASE_PROJECT_ID
    - VITE_FIREBASE_STORAGE_BUCKET
    - VITE_FIREBASE_MESSAGING_SENDER_ID
    - VITE_FIREBASE_APP_ID
    - VITE_FIREBASE_MEASUREMENT_ID (optional)
    - VITE_ADS_ENABLED=false
    - VITE_SHEETS_CONTENT_URL (optional)
    - VITE_SHEETS_COUNTERS_URL (optional)
    - VITE_USE_GA=false
    - VITE_USE_CF=false
  usage:
    - Initialize Firebase via src/libs/firebase.ts only

firebase:
  auth: Google only
  models_required:
    - profiles, attempts, leaderboards, trees, inventory, harvests, economyLogs, dailyProgress
  rules_summary:
    - attempts.create: auth && uid==auth.uid && durationSec>=30 && 0<=accuracy<=1
    - leaderboards: public read
    - others: user can read/write own docs only
  indexes_recommended:
    - attempts: (lang ASC, ts DESC), (uid ASC, ts DESC)
    - leaderboards: (period ASC, lang ASC, scopeId ASC)
    - economyLogs: (uid ASC, ts DESC)
    - attempts: (lang ASC, adjWpm DESC, ts DESC)

typing_scoring:
  formulas:
    - en.rawWPM=(chars/5)/minutes
    - zh.CPM=chineseChars/minutes; UI shows WPM(zh)=CPM
    - accuracy=correctChars/totalQuestionChars; adjusted=correctChars/minutes (正確速度)
    - 速度計算：基於實際打出的正確字數 ÷ 時間
    - 正確率計算：正確字數 ÷ 題目總字數
    - 綜合分數：就是正確速度，不需要再乘以正確率
  anti_cheat:
    - duration<30s: skip write/EP/leaderboard
    - extreme: en>200 WPM or zh>400 CPM filtered
    - no paste; backspace toggle allowed
  stabilization:
    - score = mean(winsorize(last10.adjWpm, 5/95))
  ime:
    - Only count characters on compositionend for CJK IME
  time_calculation:
    - 每題獨立計時：從焦點進入輸入框開始，到按下送出結束
    - 所有題目的時間累加為總時間
    - 確保只計算實際答題時間，不包括思考或暫停時間
    - 使用 performance.now() 進行高精度計時

garden_economy:
  config:
    - base(lang)=10; dailyEPcap=200
    - targets: en G1..G6=10..35; zh G1..G6=60..120
    - stages: S2≥100, S3≥300, S4≥700, S5≥1200
  formulas:
    - EP=base*minutes*clamp(adj/target,0,2)*(0.5+0.5*acc)
    - GP=EP*(1+0.2*fertilizerToday+0.1*waterToday)
    - fruits=floor((dailyGP/200)*(1+min(streakDays/7*0.1,0.3)))

seo_performance:
  - Use react-helmet-async for page <title>/<meta>
  - Generate sitemap.xml & robots.txt via scripts/gen-sitemap-robots.mjs
  - Output hreflang alternates and canonical per language page
  - Inject JSON-LD (SoftwareApplication/LearningResource) per route
  - /admin must use meta robots noindex,nofollow
  - Lighthouse mobile ≥ 90; FCP < 2.5s; gzip bundle < 300KB

ui_guidelines:
  path: docs/ui-guidelines.md
  enforce: true
  tokens:
    colors:
      primary: "#16a34a"     # green-600
      primary-foreground: "#ffffff"
      secondary: "#0ea5e9"   # sky-500
      accent: "#f97316"      # orange-500
      success: "#16a34a"
      warning: "#f59e0b"
      danger: "#ef4444"
      surface: "#ffffff"
      surface-foreground: "#111827"
      muted: "#6b7280"
      border: "#e5e7eb"
    radius:
      sm: 8
      md: 12
      lg: 16
    elevation:
      card: "0 1px 2px rgba(0,0,0,.06), 0 2px 8px rgba(0,0,0,.04)"
    focus:
      ring: "2px solid #38bdf8"
    motion:
      prefersReducedMotion: respect
  typing_page_principles:
    - Minimal & focused like Monkeytype; non-blocking UI
    - Realtime feedback: per-char highlight (correct/incorrect/current)
    - Countdown emphasis: big timer, <=10s turns warning color
    - Sticky shortcuts bar: Space start/pause, R reset, F focus
    - Paste disabled prompt; backspace toggle visible
    - CapsLock & out-of-focus warnings; aria-live updates
    - Performance-friendly; respect prefers-reduced-motion
    - Insights 預設收起；採單線圖（速度=綠、正確率=藍）
    - 圖上加註解：『這裡最高』與『最近（↑/↓）』並顯示數值
    - 為圖與區塊提供 aria-label / aria-describedby 與簡短圖例文字（兒童可理解）
    - 提供「小幫手」按鈕：開啟可存取對話框，用淺白語言解釋圖表與學習建議
    - 語言切換放在 Profile；Header 不再顯示快速切換

code_style:
  - Clean names; guard clauses; no empty catch
  - Comments explain why; avoid TODO
  - Keep formatting consistent; do not reformat unrelated code
  - Validate external data with Zod schemas in adapters/*

git:
  branches: [feat/*, fix/*, chore/*, docs/*]
  commits: Conventional Commits
  pr_checklist:
    - Vitest unit tests pass
    - Playwright e2e happy path passes
  backup_push:
    remotes:
      private: origin   # https://github.com/yveschen001/typesprout
      public: public    # https://github.com/yveschen001/typesprout-pubic
    rules:
      - Never push secrets to public (dotenv/.env*, service keys). Already ignored by .gitignore
      - Public push is only executed on explicit user command
    commands:
      private_push: git push origin main
      public_push: git push public main

dev_commands:
  - nvm use 22
  - npm run dev
  - npm run build
  - SITE_BASE=https://<domain> node scripts/gen-sitemap-robots.mjs
  - git push origin main   # 私庫（private）
  - git push public main   # 公庫（public，typesprout-pubic）
  - npm run deploy:private  # 本地建置 → 推 dist 到 origin:gh-pages
  - npm run deploy:public   # 本地建置（SITE_BASE=https://typesprout.com，PUBLIC_BASE=/，含 CNAME）→ 推 dist 到 public:gh-pages

references:
  - react-router v7: "https://reactrouter.com/"
  - i18next/react-i18next:
    - "https://www.i18next.com/"
    - "https://react.i18next.com/"
  - MDN BCP-47 language tags: "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang#language_tags_in_html"
  - Firebase:
    - Web setup: "https://firebase.google.com/docs/web/setup"
    - Google Sign-In: "https://firebase.google.com/docs/auth/web/google-signin"
    - Firestore rules: "https://firebase.google.com/docs/firestore/security/get-started"
  - Tailwind v4 + @tailwindcss/vite: "https://tailwindcss.com/docs/installation/using-vite"
  - Lighthouse performance targets: "https://web.dev/fast/"
  - JSON-LD:
    - SoftwareApplication: "https://schema.org/SoftwareApplication"
    - LearningResource: "https://schema.org/LearningResource"
  - UI Guidelines (本專案): "docs/ui-guidelines.md"

dns_pages:
  domain: typesprout.com
  provider: GitHub Pages
  steps:
    - 在公庫 `typesprout-pubic` 的 Pages 設定自訂網域填入 `typesprout.com`
    - 在 DNS 設定：
      - A 記錄 → 185.199.108.153 / 185.199.109.153 / 185.199.110.153 / 185.199.111.153
      -（可選）加一個 `www` 的 CNAME 指向 `yveschen001.github.io`
    - 佈署流程會自動在 gh-pages 產出 `CNAME` 檔，內容為 `typesprout.com`
    - 變更 DNS 後，等待生效（通常數分鐘至 24 小時）

adaptive_typing:
  enabled: true
  sources:
    - content/en/ngrams.json
    - content/zh/common.json
  behavior:
    - key-weight: w(key)=baseFreq*(1+alpha*errRate)*(1+beta*latencyZ)
    - alpha: 0.8
    - beta: 0.3
    - english: avoid 3 same letters; insert bigrams occasionally
    - chinese: compose 2–4 char chunks from common set
    - after-segment: slightly decay weights for recently successful keys

heatmap_charts:
  keyboard: layout=['qwerty','bopomofo'], color=errRate, highlight=nextKey
  charts: Speed(單線 adj，含最高/最近註記), Accuracy(單線)

analytics_privacy:
  ga4:
    consent: { ad_storage: denied, ad_user_data: denied, ad_personalization: denied }
    signals: { allow_google_signals: false, allow_ad_personalization_signals: false, ads_data_redaction: true }
  cloudflare: allowed
  mutually_exclusive: true
  toggles:
    - VITE_USE_GA=true -> load GA4 with Consent Mode defaults
    - VITE_USE_CF=true -> load Cloudflare Web Analytics
    - if both true -> warn and prefer GA4

timezone_handling:
  global_compatibility: true
  principles:
    - All date/time calculations must consider global users in different timezones
    - Use local time for user-facing displays and calculations
    - Use UTC for Firebase queries and data storage
    - Convert between timezones explicitly, never assume
  best_practices:
    - date_calculation:
      - Use `new Date().toLocaleDateString('en-CA')` for YYYY-MM-DD format in user's timezone
      - Use `Intl.DateTimeFormat().resolvedOptions().timeZone` to detect user's timezone
      - Use `Date.UTC()` only when creating UTC timestamps for Firebase queries
    - firebase_queries:
      - Store timestamps in UTC (Firebase default)
      - Query with UTC time ranges using `Timestamp.fromDate(Date.UTC(...))`
      - Convert results to local time for display using `toLocaleDateString()`
    - date_comparison:
      - Convert UTC timestamps to local date strings before comparing
      - Use `timestamp.toLocaleDateString('en-CA')` for consistent YYYY-MM-DD format
      - Never use `toISOString().slice(0,10)` for date comparison (UTC only)
    - examples:
      - correct: "const today = new Date().toLocaleDateString('en-CA')"
      - correct: "const localDate = utcTimestamp.toLocaleDateString('en-CA')"
      - correct: "const utcStart = Date.UTC(year, month, day, 0, 0, 0)"
      - wrong: "const date = timestamp.toISOString().slice(0,10)" # UTC only
      - wrong: "const today = new Date().toISOString().slice(0,10)" # UTC only
  affected_features:
    - Today's progress calculation (Layout.tsx)
    - Garden page today summary (Garden.tsx)
    - Leaderboard daily/weekly/monthly filtering
    - Recent activity computation (garden/api.ts)
    - All date-based data filtering and aggregation

# 🛡️ CRITICAL: Code Protection Rules
code_protection:
  # 在修改任何现有功能之前，必须先进行以下检查
  before_modification:
    - 1. 确认当前功能是否正常工作
    - 2. 识别所有相关的文件和函数
    - 3. 理解数据流和依赖关系
    - 4. 制定最小化修改计划
    - 5. 备份关键代码段
  
  # 修改过程中的保护措施
  during_modification:
    - 只修改明确需要修改的部分
    - 保持现有API和接口不变
    - 添加调试日志而不是删除现有日志
    - 使用渐进式修改，一次只改一个功能
    - 每次修改后立即测试相关功能
  
  # 禁止的操作
  forbidden_operations:
    - 不要重构已经正常工作的代码
    - 不要删除现有的调试信息
    - 不要改变现有的数据结构和接口
    - 不要同时修改多个不相关的功能
    - 不要假设代码的用途，必须先理解
  
  # 必须保护的核心功能
  protected_features:
    - 图表数据显示 (SpeedChart.tsx, AccuracyChart.tsx)
    - 最近记录显示 (Garden.tsx, recentEconomyLogs)
    - 今日进度计算 (Layout.tsx)
    - 打字测试核心逻辑 (Test.tsx)
    - 数据持久化 (applyAttemptRewards)
  
  # 修改后的验证步骤
  after_modification:
    - 1. 测试被修改的功能
    - 2. 测试相关的依赖功能
    - 3. 检查控制台是否有错误
    - 4. 验证数据流是否正常
    - 5. 确认用户界面显示正确

# 🚨 紧急修复指南
emergency_fixes:
  # 如果破坏了现有功能，立即执行以下步骤
  immediate_actions:
    - 1. 停止所有修改
    - 2. 使用 git status 检查修改的文件
    - 3. 使用 git diff 查看具体修改内容
    - 4. 使用 git restore 恢复被破坏的文件
    - 5. 重新开始，使用更小心的方式修改
  
  # 恢复策略
  recovery_strategy:
    - 优先恢复用户可见的功能
    - 保持数据完整性
    - 确保核心功能正常工作
    - 逐步修复次要功能
    - 最后优化和清理代码

# 🎯 最佳實踐方案 (v1.3.0 優化成果)
best_practices:
  # 分鐘數計算一致性
  minute_calculation_consistency:
    principle: "Layout和Garden頁面必須顯示相同的預估分鐘數"
    implementation:
      - 使用相同的錯誤處理邏輯：檢查 epPerMin 是否為有效數字
      - 設置合理的上限限制：最大100分鐘
      - 無效時返回 null 而不是錯誤值
      - 統一的計算公式：Number((sec / 60).toFixed(2))
    code_example: |
      if (!Number.isFinite(epPerMin) || epPerMin <= 0) {
        setEstMinLeft(null)
      } else {
        const mins = remain <= 0 ? 0 : Math.ceil(remain / epPerMin)
        const maxMins = 100
        const finalMins = Math.min(mins, maxMins)
        setEstMinLeft(Number.isFinite(finalMins) ? finalMins : null)
      }

  # 有效輸入分鐘數精度
  effective_input_precision:
    principle: "保留小數點後兩位精度，提供更準確的數據顯示"
    implementation:
      - 使用 Number((sec / 60).toFixed(2)) 而非 Math.floor(sec / 60)
      - 能正確顯示小於1分鐘的練習時間
      - 與預估時間計算邏輯保持一致
    code_example: |
      const minutes = Number((sec / 60).toFixed(2)) // 保留小數點後兩位
      const active = minutes > 0

  # 錯誤處理和回退機制
  error_handling_fallback:
    principle: "實現完整的錯誤處理和回退機制，確保系統穩定性"
    implementation:
      - 複合查詢失敗時自動回退到簡單查詢
      - 所有查詢都失敗時返回默認值
      - 詳細的調試日誌便於問題排查
      - 避免系統崩潰，提供降級服務
    code_example: |
      try {
        // 方案1：複合查詢（需要索引）
        const q = query(collection(db, 'attempts'), ...)
        // ... 處理邏輯
      } catch (error) {
        console.warn('Composite query failed, falling back to simple query:', error)
        try {
          // 方案2：簡單查詢（不需要索引）
          const q = query(collection(db, 'attempts'), ...)
          // ... 處理邏輯
        } catch (fallbackError) {
          console.error('Both queries failed:', fallbackError)
          return { days: defaultDays, activeDays: 0 }
        }
      }

  # 時區處理一致性
  timezone_consistency:
    principle: "所有日期計算必須考慮全球用戶的不同時區"
    implementation:
      - 用戶顯示使用本地時間：toLocaleDateString('en-CA')
      - Firebase查詢使用UTC時間：Timestamp.fromDate(Date.UTC(...))
      - 日期比較統一使用本地時間格式
      - 避免使用 toISOString().slice(0,10) 進行日期比較
    code_example: |
      // 正確：使用本地時間
      const today = new Date().toLocaleDateString('en-CA')
      const localDate = utcTimestamp.toLocaleDateString('en-CA')
      
      // 錯誤：使用UTC時間
      const today = new Date().toISOString().slice(0,10) // UTC only

  # 數據源統一性
  data_source_unification:
    principle: "相同功能的數據源必須統一，避免不一致"
    implementation:
      - Home和Garden頁面的樹組件使用相同的 loadGarden 數據源
      - 避免使用不同的hook或API獲取相同數據
      - 確保數據更新時所有相關組件同步更新
    code_example: |
      // 統一使用 loadGarden 而非 usePlantLevel
      const gardenData = await loadGarden(user.uid)
      const stage = Number(gardenData.tree?.stage || 1)

  # 題庫加載優化
  question_bank_optimization:
    principle: "智能加載策略，平衡性能和用戶體驗"
    implementation:
      - 初始載入3頁，背景預載剩餘頁面
      - 智能游標管理，Firebase同步進度
      - 80%完成度時重置游標，確保完整循環
      - 錯誤處理和回退機制
    code_example: |
      // 動態控制抓取上限
      const dynamicLimit = Math.min(200, Math.max(numQuestions * 4, 60))
      // 背景續載
      setTimeout(() => {
        fetchContent({ lang, limit: 200, startPage: nextStart, pageCount: 2 })
      }, 0)

  # UI組件一致性
  ui_component_consistency:
    principle: "相同功能的UI組件必須保持一致的樣式和行為"
    implementation:
      - 統一的Tooltip樣式和位置
      - 一致的載入狀態和錯誤處理
      - 相同的數據顯示格式和精度
      - 統一的顏色和間距規範
    code_example: |
      // 統一的Tooltip實現
      <Tooltip label="詳細說明文字">？</Tooltip>
      
      // 統一的載入狀態
      {loading && <div className="text-center py-8">載入中...</div>}
      {error && <div className="text-center py-8 text-red-600">{error}</div>}

  # 性能優化策略
  performance_optimization:
    principle: "在保證功能的前提下優化性能"
    implementation:
      - 使用 onSnapshot 進行實時數據更新
      - 實現智能預載和緩存機制
      - 避免不必要的重複查詢
      - 合理使用 limit 限制查詢數量
    code_example: |
      // 實時監聽數據變化
      const unsub = onSnapshot(q, (snaps) => {
        // 處理數據更新
      })
      
      // 智能預載
      if (remain <= THRESH && !prefetchingRef.current) {
        prefetchingRef.current = true
        // 背景預載邏輯
      }

  # 時間計算準確性
  time_calculation_accuracy:
    principle: "確保時間計算的準確性和一致性"
    implementation:
      - 每題獨立計時：從焦點進入輸入框開始，到按下送出結束
      - 所有題目的時間累加為總時間
      - 確保只計算實際答題時間，不包括思考或暫停時間
      - 使用 performance.now() 進行高精度計時
      - 速度計算基於實際打出的正確字數，不是題目總字數
      - 正確率計算基於題目總字數，未輸入部分算作錯誤
    code_example: |
      // 正確的時間計算邏輯
      const accuracy = totalCorrectAll / totalQCharsAll // 正確字數 ÷ 題目總字數
      const rawBase = isZhTyping ? (totalCorrectAll / minutes) : ((totalCorrectAll / 5) / minutes)
      const adjWpm = rawBase // 綜合分數就是正確速度，不需要再乘以正確率
      
      // 每題獨立計時
      const qStartTime = performance.now()
      // ... 答題過程
      const qElapsedMs = performance.now() - qStartTime
      totalEffectiveMs += qElapsedMs