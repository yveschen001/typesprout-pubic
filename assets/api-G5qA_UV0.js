import{g,d as y,e as r,k as D,l as b,f as v,m as p,q as h,w as A,o as S,n as R,i as T}from"./index-Dtk1fXa2.js";async function N(a){try{const[t,e]=await Promise.all([g(y(r,"trees",a)),g(y(r,"inventory",a))]);return{tree:t.exists()?t.data():void 0,inventory:e.exists()?e.data():void 0}}catch(t){if(t?.code==="permission-denied"){const e=y(r,"trees",a),o=y(r,"inventory",a);await Promise.all([D(e,{uid:a,gpTotal:0,stage:1,lastActiveDate:new Date().toLocaleDateString("en-CA"),createdAt:p(),updatedAt:p()},{merge:!0}),D(o,{fertilizer:0,water:0,updatedAt:p()},{merge:!0})]);const[s,n]=await Promise.all([g(e),g(o)]);return{tree:s.exists()?s.data():void 0,inventory:n.exists()?n.data():void 0}}throw t}}async function L(a,t=30){try{console.log("Garden API: Getting recent activity",{uid:a,n:t});const e=h(v(r,"economyLogs"),A("uid","==",a),S("ts","desc"),R(t)),s=(await T(e)).docs.map(n=>({id:n.id,...n.data()}));return console.log("Recent economy logs retrieved:",{count:s.length}),s}catch(e){return console.error("Error getting recent economy logs:",e),[]}}async function _(a){await b(r,async t=>{const e=y(r,"trees",a),o=await t.get(e);if(!o.exists())throw new Error("NO_TREE");const s=o.data(),n=new Date().toLocaleDateString("en-CA");if(s.stage<5)throw new Error("NOT_FRUIT_STAGE");if((s.dailyDate||n)!==n)throw new Error("NO_DAILY_GP");const m=Number(s.dailyGp||0);if(m<=0)throw new Error("NO_DAILY_GP");const f=Number(s.streakDays||0),i=Math.floor(m/100*(1+Math.min(f/7*.1,.3)));if(i<=0)throw new Error("NO_FRUITS");const d=y(v(r,"harvests"));t.set(d,{uid:a,date:n,fruits:i,pointsGained:Math.floor(i*5),treeSeed:s.seed||0});const c=y(r,"profiles",a),l=await t.get(c),u=Number((l.exists()?l.data().points:0)||0);t.set(c,{points:u+Math.floor(i*5),updatedAt:p()},{merge:!0}),t.update(e,{dailyGp:0,updatedAt:p()}),t.set(y(v(r,"economyLogs")),{uid:a,ts:p(),type:"earn",source:"harvest",delta:Math.floor(i*5),balanceAfter:u+Math.floor(i*5)})})}function E(a){return Math.max(1,Math.min(5,Math.floor(a)))}async function G(a){const t=new Date,e=[];for(let o=4;o>=0;o--){const s=new Date(t.getTime()-o*24*60*60*1e3);e.push(s.toLocaleDateString("en-CA"))}console.log("computeRecent5DaysActivity: using simple query to avoid index requirements");try{const o=h(v(r,"attempts"),A("uid","==",a),S("ts","desc"),R(100)),s=await T(o),n=new Map,m=new Date(e[0]+"T00:00:00");for(const d of s.docs){const c=d.data(),l=c.ts?.toDate?.()?c.ts.toDate():c.ts instanceof Date?c.ts:new Date;if(l<m)break;const u=Number(c.durationSec||0),w=l.toLocaleDateString("en-CA");e.includes(w)&&n.set(w,(n.get(w)||0)+u)}const f=e.map(d=>{const c=n.get(d)||0,l=Number((c/60).toFixed(2)),u=l>0;return{date:d,active:u,minutes:l}}),i=f.filter(d=>d.active).length;return{days:f,activeDays:i}}catch(o){return console.error("computeRecent5DaysActivity: query failed:",o),{days:e.map(n=>({date:n,active:!1,minutes:0})),activeDays:0}}}async function q(a){const{days:t,activeDays:e}=await G(a),o=E(e);return console.log("updateStageFromRecentActivity: computed stage and days (write disabled):",{stage:o,activeDays:e,days:t}),{stage:o,days:t}}export{_ as h,N as l,L as r,q as u};
